module ATCLite
  # Class to represent an speed.  Speeds can either be defined in knots or mach.  The object is aware how the speed
  # was set, and automatically manages conversion if speed is requested in the alternative unit.
  class Speed
    include Comparable

    # Define the speed either in knots or in mach.
    def initialize: (Numeric? speed, ?mach: Float? mach) -> untyped

    # Return the speed as a mach number.  If the speed was set as a mach number, simply returns the original setting.
    # If set as knots and if the altitude adjusts for them.  Includes the temperature to allow for a temperature
    # adjustment as well.
    def mach: (?altitude: Altitude? altitude, ?temperature: Numeric? temperature) -> Float

    # Return the speed as a mach number.  If the speed was set as a mach number, simply returns the original setting.
    # If set as knots and if the altitude adjusts for them.  Includes the temperature to allow for a temperature
    # adjustment as well.
    def knots: (?altitude: Altitude? altitude, ?temperature: Numeric? temperature) -> Numeric

    private

    # Table the provides the speed of sound at altitudes 5000ft apart.  Above FL 350, speed of sound is close to
    # constant
    #
    # rubocop: disable Layout/ExtraSpacing - array laid out for easier reading
    # rubocop: disable Layout/SpaceInsideArrayLiteralBrackets
    SPEED_OF_SOUND_BY_FL: [ { altitude: Altitude, celsius: Float, knots: Float] ]

    # Private method that interpolates the speed of sound for a give altitude.
    # @todo: needs to add adjusting for temperature
    def mach_1_for_altitude_and_temperature: (Altitude altitude, Float _temperature) -> Float
  end

  # Add the ability to write: 0.8.mach to create an appropriate Speed object
  class ::Float
    def mach: () -> Speed
  end

  # Add the ability to write: 245.knots to create an appropriate Speed object
  class ::Numeric
    def knots: () -> Speed
  end
end
